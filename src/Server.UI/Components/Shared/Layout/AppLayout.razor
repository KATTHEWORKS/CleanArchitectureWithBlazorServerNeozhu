@using Severity = Severity
@using Toolbelt.Blazor.HotKeys2
@using CleanArchitecture.Blazor.Server.UI.Services.UserPreferences
@using CleanArchitecture.Blazor.Server.UI.Constants
@layout MainLayout
@inherits LayoutComponentBase

@inject LayoutService LayoutService
@inject NavigationManager Navigation
@inject HotKeys HotKeys
@inject IStringLocalizer<SharedResource> L

<MudLayout>
    <HeaderMenu NavigationMenuDrawerOpen="_navigationMenuDrawerOpen"
                OpenSearchDialog="OpenSearchDialog"
                IsDarkMode="@LayoutService.IsDarkMode"
                ToggleNavigationMenuDrawer="ToggleNavigationMenuDrawer"
                RightToLeft="@LayoutService.IsRTL"
                RightToLeftToggle="LayoutService.ToggleRightToLeft"
                OnSettingClick="@(() => _themingDrawerOpen = true)" IsAnonymousPage=@(IsAnonymousPage(Navigation.Uri)) IsAuthenticated=@IsAuthenticated />

    <ThemesMenu ThemingDrawerOpen="_themingDrawerOpen"
                ThemingDrawerOpenChanged="ThemingDrawerOpenChangedHandler"
                UserPreferences="_userPreferences"
                UserPreferencesChanged="LayoutService.UpdateUserPreferences" />
    <ThemesButton OnClick="@(() => _themingDrawerOpen = true)" />
    <AuthorizeView>
        <Authorized>

            <NavigationMenu DrawerOpen="_navigationMenuDrawerOpen" UserProfile="@_userProfile"
                            DrawerOpenChanged="NavigationMenuDrawerOpenChangedHandler" />
            <AppMainComponent Body="@Body" _errorBoundary="@_errorBoundary" _userProfile="@_userProfile"></AppMainComponent>
            <UserLoginState />
        </Authorized>
        <NotAuthorized>
            @if (IsAnonymousPage(Navigation.Uri))
                {
                <!-- Render the page content for anonymous access -->
                <AppMainComponent Body="@Body" _errorBoundary="@_errorBoundary" _userProfile="@_userProfile"></AppMainComponent>
                }
            else
                {
                <!-- Render the authorized layout -->
                <RedirectToLogin />
                }

        </NotAuthorized>
    </AuthorizeView>

</MudLayout>

@code
{
    private bool _commandPaletteOpen;
    private bool _navigationMenuDrawerOpen = true;
    private UserPreferences _userPreferences = new();
    private bool _themingDrawerOpen;
    private UserProfile? _userProfile;
    private ErrorBoundary? _errorBoundary { set; get; }

    private bool IsAuthenticated = false;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    protected override async Task OnInitializedAsync()
        {
        var state = await AuthState;
        IsAuthenticated = state.IsAuthenticated();

        _userProfile = state.User.GetUserProfileFromClaim();
        }
    protected override void OnParametersSet()
        {
        ResetBoundary();
        }

    private void ResetBoundary()
        {
        // On each page navigation, reset any error state
        _errorBoundary?.Recover();
        }

    protected void NavigationMenuDrawerOpenChangedHandler(bool state)
        {
        _navigationMenuDrawerOpen = state;
        }

    protected void ThemingDrawerOpenChangedHandler(bool state)
        {
        _themingDrawerOpen = state;
        }

    protected void ToggleNavigationMenuDrawer()
        {
        _navigationMenuDrawerOpen = !_navigationMenuDrawerOpen;
        }

    private async Task OpenSearchDialog()
        {
        if (!_commandPaletteOpen)
            {
            var options = new DialogOptions
                    {
                    NoHeader = true,
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true
                    };

            var commandPalette = DialogService.Show<SearchDialog>("", options);
            _commandPaletteOpen = true;

            await commandPalette.Result;
            _commandPaletteOpen = false;
            }
        }

    bool IsAnonymousPage(string uri)
        {
        // List the URIs of pages that should be accessible anonymously
        var anonymousPages = new List<string> { "welcome", "vote","rating" };
        var anonymousPagesPrefix = "rating/";//for vote/id

        // Check if the current URI is in the list of anonymous pages
        uri = uri.Replace(Navigation.BaseUri, string.Empty);
        return anonymousPages.Contains(uri.ToLower()) || uri.StartsWith(anonymousPagesPrefix);
        }
}
