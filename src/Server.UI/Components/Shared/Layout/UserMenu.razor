@using CleanArchitecture.Blazor.Infrastructure.Services.JWT
@using CleanArchitecture.Blazor.Server.UI.Services
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@inherits FluxorComponent
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IState<UserProfileState> UserProfileState
@inject IStringLocalizer<HeaderMenu> L
@inject IAccessTokenProvider TokenProvider


<MudTooltip Arrow="true" Text="@L["User Profile"]">
    <MudMenu AnchorOrigin="Origin.BottomRight"
             Icon="@Icons.Material.Filled.PermIdentity"
             Class="mx-1"
             LockScroll="true"
             TransformOrigin="Origin.TopRight">
        <ChildContent>
            <div class="pb-4"
                 style="min-width: 260px;margin-bottom:0px!important">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="ma-4">
                    @if (IsLoading)
                        {
                        <MudProgressCircular Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudSkeleton Width="120px" />
                            <MudSkeleton Width="120px" />
                        </MudStack>
                        }
                    else
                        {
                        <MudAvatar>
                            @if (string.IsNullOrEmpty(UserProfile?.ProfilePictureDataUrl))
                                {
                                <MudImage>@UserProfile?.UserName?.First()</MudImage>
                                }
                            else
                                {
                                <MudImage Src="@UserProfile?.ProfilePictureDataUrl"></MudImage>
                                }
                        </MudAvatar>

                        <MudStack Justify="Justify.SpaceBetween" Spacing="0">
                            <MudText Typo="Typo.body1">@UserProfile?.DisplayName</MudText>
                            <MudText Typo="Typo.body2">@UserProfile?.Email</MudText>
                        </MudStack>
                        }
                </MudStack>

                <MudDivider Class="my-2" />
                <MudMenuItem Href="/user/profile">
                    <div class="d-flex">
                        <MudIcon Class="mx-2"
                                 Icon="@Icons.Material.Filled.Person" />
                        <MudText>@L["Profile"]</MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnAction="OnSettingClick">
                    <div class="d-flex">
                        <MudIcon Class="mx-2"
                                 Icon="@Icons.Material.Filled.Settings" />
                        <MudText>@L["Settings"]</MudText>
                    </div>
                </MudMenuItem>
                <div class="mt-4 mx-4">
                    <MudButton Color="Color.Default"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Logout"
                               OnClick="OnLogout"
                               Variant="Variant.Outlined">
                        @L["Logout"]
                    </MudButton>
                </div>
            </div>
        </ChildContent>
    </MudMenu>
</MudTooltip>

@code
{
    [Parameter] public EventCallback<EventArgs> OnSettingClick { get; set; }
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    private bool IsLoading => UserProfileState.Value.IsLoading;
    //private UserProfile UserProfile => UserProfileState.Value.UserProfile;
    private UserProfile UserProfile { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
        {
        var state = await AuthState;
        UserProfile = state.User.GetUserProfileFromClaim();
        }

    internal async Task OnLogout()
        {
        var parameters = new DialogParameters<LogoutConfirmation>
        {
            { x => x.ContentText, $"{ConstantString.LogoutConfirmation}" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialog = DialogService.Show<LogoutConfirmation>(ConstantString.LogoutConfirmationTitle, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
            {
            await TokenProvider.RemoveAuthDataFromStorage();
            ((BlazorAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
            await new ExternalAuth(JS).Logout();
            NavigationManager.NavigateTo("");//ideally this should not be but logout button not happening so temp fix //todo
            }
        }
}