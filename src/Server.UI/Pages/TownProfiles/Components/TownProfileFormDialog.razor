@using CleanArchitecture.Blazor.Application.Features.TownProfiles.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<TownProfiles> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.TypeId)]" @bind-Value="model.TypeId" For="@(() => model.TypeId)" Min="0" Required="false" RequiredError="@L["type id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudCheckBox Label="@L[model.GetMemberDescription(x=>x.Active)]" @bind-Checked="model.Active" For="@(() => model.Active)" ></MudCheckBox>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.SubTitle)]" @bind-Value="model.SubTitle" For="@(() => model.SubTitle)" Required="false" RequiredError="@L["sub title is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Description)]" Lines="3" For="@(() => model.Description)" @bind-Value="model.Description"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.ImageUrl)]" @bind-Value="model.ImageUrl" For="@(() => model.ImageUrl)" Required="false" RequiredError="@L["image url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Address)]" @bind-Value="model.Address" For="@(() => model.Address)" Required="false" RequiredError="@L["address is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.MobileNumber)]" @bind-Value="model.MobileNumber" For="@(() => model.MobileNumber)" Required="false" RequiredError="@L["mobile number is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.GoogleMapAddressUrl)]" @bind-Value="model.GoogleMapAddressUrl" For="@(() => model.GoogleMapAddressUrl)" Required="false" RequiredError="@L["google map address url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.EndDateToShow)]" @bind-Value="model.EndDateToShow" For="@(() => model.EndDateToShow)" Required="false" RequiredError="@L["end date to show is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.PriotiryOrder)]" @bind-Value="model.PriotiryOrder" For="@(() => model.PriotiryOrder)" Min="0" Required="false" RequiredError="@L["priotiry order is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.GoogleProfileUrl)]" @bind-Value="model.GoogleProfileUrl" For="@(() => model.GoogleProfileUrl)" Required="false" RequiredError="@L["google profile url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.FaceBookUrl)]" @bind-Value="model.FaceBookUrl" For="@(() => model.FaceBookUrl)" Required="false" RequiredError="@L["face book url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.YouTubeUrl)]" @bind-Value="model.YouTubeUrl" For="@(() => model.YouTubeUrl)" Required="false" RequiredError="@L["you tube url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.InstagramUrl)]" @bind-Value="model.InstagramUrl" For="@(() => model.InstagramUrl)" Required="false" RequiredError="@L["instagram url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.TwitterUrl)]" @bind-Value="model.TwitterUrl" For="@(() => model.TwitterUrl)" Required="false" RequiredError="@L["twitter url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.OtherReferenceUrl)]" @bind-Value="model.OtherReferenceUrl" For="@(() => model.OtherReferenceUrl)" Required="false" RequiredError="@L["other reference url is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.TownId)]" @bind-Value="model.TownId" For="@(() => model.TownId)" Min="0" Required="false" RequiredError="@L["town id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.ApprovedCount)]" @bind-Value="model.ApprovedCount" For="@(() => model.ApprovedCount)" Min="0" Required="false" RequiredError="@L["approved count is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.RejectedCount)]" @bind-Value="model.RejectedCount" For="@(() => model.RejectedCount)" Min="0" Required="false" RequiredError="@L["rejected count is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.LikeCount)]" @bind-Value="model.LikeCount" For="@(() => model.LikeCount)" Min="0" Required="false" RequiredError="@L["like count is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.DisLikeCount)]" @bind-Value="model.DisLikeCount" For="@(() => model.DisLikeCount)" Min="0" Required="false" RequiredError="@L["dis like count is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditTownProfileCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditTownProfileCommand model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditTownProfileCommand() { };
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}