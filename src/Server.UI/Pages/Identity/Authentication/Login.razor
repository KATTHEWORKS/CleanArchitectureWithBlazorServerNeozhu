@page "/pages/authentication/login"
@* UiConstants.LoginUrl="/pages/authentication/login" *@

@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using Severity = Severity
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Infrastructure.Services.JWT
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using Microsoft.AspNetCore.DataProtection
@using CleanArchitecture.Blazor.Server.UI.Services
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@* @using CleanArchitecture.Blazor.Infrastructure.Constants.User *@
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role

@inherits OwningComponentBase
@implements IDisposable

@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JS
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@* @inject UserManager<ApplicationUser> UserManager *@
@* @inject CustomUserManager UserManager  still ned to validate all dependencies,testing pending*@
@inject IIdentityService IdentityService
@inject IDataProtectionProvider DataProtectionProvider
@inject IValidationService Validator
@inject IStringLocalizer<Login> L

@* @inject CleanArchitecture.Blazor.Infrastructure.Services.Vote.IVoteService VoteServices *@
<PageTitle>@_title</PageTitle>

<AuthorizeView>
    <NotAuthorized Context="auth">
        <MudForm Model="@_model" @ref="@_form" @bind-IsValid="@_success" ValidationDelay="0" Validation="@(Validator.ValidateValue(_model))">
            <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
            <MudText>
                @L["Don't have an account?"] <MudLink Href="/pages/authentication/register">@L["Sign Up"]</MudLink>
            </MudText>
            <MudTextField T="string"
                          @bind-Value="_model.UserName" For="@(() => _model.UserName)"
                          Label="@L["Username"]"
                          Variant="Variant.Outlined"
                          Required="true"
                          OnlyValidateIfDirty="true"
                          Immediate="true"
                          Class="my-6">
            </MudTextField>

            <MudPasswordField @bind-Value="_model.Password"
                              For="@(() => _model.Password)"
                              Label="@L["Password"]"
                              PasswordMode="true"
                              Variant="Variant.Outlined"
                              Required="true">
            </MudPasswordField>

            <div Class="d-flex justify-space-between align-center">
                <MudCheckBox For="@(() => _model.RememberMe)" @bind-Value="_model.RememberMe" Label="@L["Remember me?"]" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
                <MudLink Href="/pages/authentication/forgot-password">@L["Forgot password?"]</MudLink>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       Disabled="@(_loading)"
                       ButtonType="ButtonType.Button"
                       OnClick="@(OnSubmit)"
                       FullWidth="true">
                @if (_loading)
                    {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2"> @ConstantString.Loading</MudText>
                    }
                else
                    {
                    <MudText>@L["Sign In"]</MudText>
                    }

            </MudButton>
            <div class="d-flex justify-space-around flex-grow-1 my-4 gap-4">
                <MudButton Class="flex-grow-1" OnClick="@(() => SignInExternal("Microsoft"))" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Microsoft" ButtonType="ButtonType.Button"
                           title="Sign in with Microsoft">
                    @ConstantString.Microsoft
                </MudButton>
                <MudButton Class="flex-grow-1" OnClick="@(() => SignInExternal("Google"))" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Google" ButtonType="ButtonType.Button"
                           title="Sign in with Google">
                    @ConstantString.Google
                </MudButton>
            </div>
        </MudForm>
    </NotAuthorized>
    <Authorized>
        <RedirectToHome></RedirectToHome>
        <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">@L["You are already logged in."]</MudAlert>
    </Authorized>
</AuthorizeView>

@code {

    private string _title = "Sign In";
    private MudForm? _form;
    private bool _success;
    private bool _loading;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] public IMapper _mapper { get; set; }
    // private CustomRoleManager RoleManager { get; set; } = default!;
    private IAccessTokenProvider AccessTokenProvider { get; set; } = default!;

    private LoginFormModel _model = new()
            {
            UserName = UserName.Administrator,// "administrator",
            Password = UserName.DefaultPassword,//"Password123!",
            RememberMe = true
            };
    private string returnUrl = "";
    protected override async Task OnInitializedAsync()
        {
        await base.OnInitializedAsync();
        _title = L["Sign In"];
        var uri = new Uri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = queryString["returnUrl"] ?? "";
        // if (!string.IsNullOrEmpty(returnUrl))//not requried
        //     returnUrl = returnUrl.Replace(NavigationManager.BaseUri, string.Empty);
        //UserManager = ScopedServices.GetRequiredService<CustomUserManager>();
        // RoleManager = ScopedServices.GetRequiredService<CustomRoleManager>();
        AccessTokenProvider = ScopedServices.GetRequiredService<IAccessTokenProvider>();

        }

    private async Task OnSubmit()
        {//since in Production this wont be existed. UserManager directly accessing here
        try
            {
            _loading = true;
            await _form!.Validate();

            if (_form!.IsValid)
                {
                //var user = await UserManager.FindByNameForLocalAccountAsync(_model.UserName!);
                var user = await IdentityService.GetUserByUserName(_model.UserName!);
                if (user is null)
                    {
                    Logger.LogWarning("Someone tried to login to the user {@UserName:l}, however this account does not exist", _model.UserName);
                    Snackbar.Add(L["No user found, or no authorization, please contact the administrator."], Severity.Error);
                    }
                else
                    {
                    // if (user.IsActive == false)
                    //     {
                    //     await OnResetPassword(user);
                    //     }
                    // else
                    //     {
                    //since currently localLogin is NOT using base login,so password is not hashing instead its plain password so had to bypass here.If thats covered then this also works fine.till then this bypass is necessary for local account
                    // var result = await UserManager.CheckPasswordAsync(user, _model.Password!);
                    // if (!result)
                    // {
                    //     Logger.LogWarning("{@UserName:l} failed authentication", user.UserName);
                    //     Snackbar.Add(L["Please check your username and password. If you are still unable to log in, contact an administrator."], Severity.Error);
                    // }
                    // else
                    // {

                    var accessToken = await TokenProvider.Login(user);
                    var claims = await TokenProvider.ParseClaimsFromJwt(accessToken);
                    ((BlazorAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(claims);
                    Logger.LogInformation("{@UserName:l} has successfully logged in", user.UserName);
                    await IdentityService.UpdateLiveStatus(user.Id, true);
                    NavigationManager.NavigateTo(NavigationManager.BaseUri + returnUrl, true);
                    Logger.LogInformation("{@UserName:l} has successfully logged in", user.UserName);
                    }
                }
            }
        catch (Exception e)
            {
            Console.WriteLine(e.ToString());

            }
        finally
            {
            _loading = false;
            }
        }

    private async Task OnResetPassword(ApplicationUser item)
        {
        var model = new ResetPasswordFormModel { Id = item.Id, DisplayName = item.DisplayName, UserName = item.UserName, ProfilePictureDataUrl = item.ProfilePictureDataUrl };
        var parameters = new DialogParameters<ResetPasswordDialog>
        {
            { x => x.Model, model }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ResetPasswordDialog>(L["Set new password"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            {
            // var token = await UserManager.GeneratePasswordResetTokenAsync(item);
            // var state = await UserManager.ResetPasswordAsync(item, token, model.Password!);
            var token = await IdentityService.GeneratePasswordResetTokenAsync(item);
            var state = await IdentityService.ResetPasswordAsync(item, token, model.Password!);
            if (state.Succeeded)
                {
                await IdentityService.UpdateLiveStatus(item.Id, true);
                // item.IsActive = true;
                // await UserManager.UpdateAsync(item);//TODO need to change for update whole entity by replacing withspecific column alone
                Snackbar.Add($"{L["Password update successfuly"]}", Severity.Info);
                Logger.LogInformation("{@UserName:l} has set a new password", item.UserName);
                _model.Password = "";
                }
            else
                {
                Snackbar.Add($"{string.Join(",", state.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                }
            }
        }

    private async Task SignInExternal(string provider)
        {
        try
            {
            await new ExternalAuth(JS).Login(provider, DotNetObjectReference.Create(this));
            }
        catch (Exception e)
            {
            Console.WriteLine(e.ToString());
            throw;
            }
        }

    [JSInvokable]
    public async Task ConfirmExternal(string provider, string userName, string name, string accessToken, string? pictureUrl = null, bool email_verified = false)
        {
        var user = await CreateUserWithExternalProvider(provider, userName, name, accessToken, pictureUrl, email_verified);
        await TokenProvider.Login(user);
        // var claims = await TokenProvider.ParseClaimsFromJwt(accessToken);
        // ((BlazorAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(claims);
        await IdentityService.UpdateLiveStatus(user.Id, true);//club this with login itself with some flag
        NavigationManager.NavigateTo(NavigationManager.BaseUri + returnUrl, true);
        Logger.LogInformation("{@UserName:l} has successfully logged in", user.UserName);
        }

    private async Task<ApplicationUser> CreateUserWithExternalProvider(string provider, string userName, string name, string accessToken, string? pictureUrl = null, bool email_verified = false)
        {//need to validate end to end,tesing pending
        var user = await IdentityService.GetUserByUserName(userName);
        if (user is null)
            {
            //default pass as patient or voter
            var newUserDto = new ApplicationUserDto
                    {
                    Email_Verified = email_verified,
                    //EmailConfirmed = true,
                    IsActive = true,
                    IsLive = true,
                    UserName = userName,
                    Email = userName.Any(x => x == '@') ? userName : $"{userName}@{provider}.com",
                    Provider = provider,
                    DisplayName = name,
                    ProfilePictureDataUrl = pictureUrl,
                    //SuperiorId = admin.Id,
                    // DefaultTenantId = admin.DefaultTenantId,  //default pass as patient or voter
                    // DefaultTenantName = admin.DefaultTenantName //default pass as patient or voter
                    };
            var createResult = await IdentityService.CreateUserAsync(newUserDto);

            // //TODO change this below logic of admin referring
            // var admin = await IdentityService.GetUserDtoByUserName(UserName.Administrator) ?? throw new NotFoundException("Administrator's account Not Found.");
            // user = new ApplicationUser
            //         {
            //         EmailConfirmed = true,
            //         IsActive = true,
            //         IsLive = true,
            //         UserName = userName,
            //         Email = userName.Any(x => x == '@') ? userName : $"{userName}@{provider}.com",
            //         Provider = provider,
            //         DisplayName = name,
            //         SuperiorId = admin.Id,
            //         DefaultTenantId = admin.DefaultTenantId,
            //         DefaultTenantName = admin.DefaultTenantName
            //         };
            // var createResult = await UserManager.CreateAsync(user);//extension handlees default tenant & roles
            if (!createResult.Succeeded)
                {
                return null;
                }
            user = _mapper.Map<ApplicationUser>(newUserDto);
            await IdentityService.AddLoginAsync(user, new UserLoginInfo(provider, accessToken, user.DisplayName));
            //await UserManager.AddLoginAsync(user, new UserLoginInfo(provider, userName, accessToken));
            }
        return user;
        }

}