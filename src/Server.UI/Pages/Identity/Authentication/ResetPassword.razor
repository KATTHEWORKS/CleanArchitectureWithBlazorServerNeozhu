@page "/pages/authentication/reset-password/{userId?}"
@using CleanArchitecture.Blazor.Domain.Identity
@using Severity = Severity
@using System.Web
@inherits OwningComponentBase
@attribute [AllowAnonymous]
@inject IValidationService Validator
@inject IStringLocalizer<ResetPassword> L
@inject NavigationManager NavigationManager
@inject ILogger<ResetPassword> Logger
<PageTitle>@Title</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        <MudText Typo="Typo.h4" GutterBottom="true">@Title</MudText>
        <MudText Typo="Typo.body1">@L["Please enter your new password below. Make sure your password is strong and memorable for you."]</MudText>
        <MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
            <MudGrid>
                <MudItem xs="12">
                    <MudPasswordField Immediate="true"
                                      Label="@L["New Password"]"
                                      @bind-Value="Model.Password"
                                      For="@(() => Model.Password)"
                                      Variant="Variant.Text"
                                      PasswordMode="true"
                                      Required="true"
                                      Class="mt-4" />
                </MudItem>
                <MudItem xs="12">
                    <MudPasswordField Immediate="true"
                                      Label="@L["Confirm New Password"]"
                                      @bind-Value="Model.ConfirmPassword"
                                      For="@(() => Model.ConfirmPassword)"
                                      Variant="Variant.Text"
                                      PasswordMode="true"
                                      Required="true"
                                      Class="mt-4" />
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="my-4" Disabled="@saving" OnClick="@(() => OnResetPassword())">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2"> @L["Waiting"]</MudText>
            }
            else
            {
                <MudText>@L["Reset Password"]</MudText>
            }
            </MudButton>
    </NotAuthorized>
    <Authorized>
        <RedirectToHome></RedirectToHome>
        <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">@L["You are already logged in."]</MudAlert>
    </Authorized>
</AuthorizeView>

@code{
    public string Title = "Reset Your Password";
    [Parameter]
    [SupplyParameterFromQuery(Name ="token")]
    public string? Token { get; set; }
    [Parameter]
    public string? UserId { get; set; }
    private MudForm? _form;
    public ResetPasswordFormModel Model { get; set; } = new ResetPasswordFormModel();
    private string Password { get; set; } = string.Empty;
    private bool saving; 
    private UserManager<ApplicationUser> UserManager { get; set; } = null!;
    protected override Task OnInitializedAsync()
    {
        Title = L["Reset Your Password"];
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        return base.OnInitializedAsync();
    }
    private async Task OnResetPassword()
    {
        try
        {
            saving = true;
            if (string.IsNullOrEmpty(Token))
            {
                Snackbar.Add(string.Format(L["Token invalid"]), Severity.Error);
                return;
            }
            if (string.IsNullOrEmpty(UserId))
            {
                Snackbar.Add(string.Format(L["UserId invalid"]), Severity.Error);
                return;
            }
            await _form!.Validate();
            if (_form!.IsValid)
            {
                var user = await UserManager.FindByIdAsync(UserId!);
                var state = await UserManager.ResetPasswordAsync(user!, Token, Model.ConfirmPassword!);
                if (user is not null && state.Succeeded)
                {
                    user.IsActive = true;
                    await UserManager.UpdateAsync(user);
                    Snackbar.Add($"{L["The new password has been set successfully, please login again"]}", Severity.Info);
                    Logger.LogInformation("{@UserName:l} has set a new password", user.UserName);
                    NavigationManager.NavigateTo("/pages/authentication/login");
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", state.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                }
            }

        }
        catch (Exception e)
        {
            Snackbar.Add(string.Format(L["{0}, please contact the administrator"], e.Message), Severity.Error);
        }
        finally
        {
            saving = false;
        }
    }
}