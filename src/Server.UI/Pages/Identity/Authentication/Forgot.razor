@page "/pages/authentication/forgot-password"

@attribute [AllowAnonymous]
@using Severity = Severity
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Features.Identity.Commands.ResetPassword
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@inherits OwningComponentBase

@inject IStringLocalizer<Forgot> L
@inject IMailService MailService
@inject ISender Sender
@inject ILogger<Forgot> Logger
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <MudText Typo="Typo.h4" GutterBottom="true">@L["Forgot Password?"]</MudText>
        <MudText Typo="Typo.body1">@L["No worries! Just enter your email address below and we'll send you a link to reset your password."]</MudText>
            <MudTextField T="string" @bind-Value="@_emailAddress" Label="@L["E-mail"]" Variant="Variant.Outlined" Class="my-4"></MudTextField>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="mt-3" Disabled="@(string.IsNullOrEmpty(_emailAddress) || _sending)" OnClick="@(() => ResetPassword())">
                @if (_sending)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2"> @L["Waiting"]</MudText>
                }
                else
                {
                <MudText>@L["Send E-mail"]</MudText>
                }
            </MudButton>
    </NotAuthorized>
    <Authorized>
        <RedirectToHome></RedirectToHome>
        <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">@L["You are already logged in."]</MudAlert>
    </Authorized>
</AuthorizeView>

@code{
    public string Title = "Forgot Password";
    private string _emailAddress = string.Empty;
    private bool _sending;
    private readonly string _resetPasswordToken = string.Empty;
    private string _inputToken = string.Empty;

    //private readonly ApplicationUser? _user = null;
    // private UserManager<ApplicationUser> UserManager { get; set; } = null!;
    private CustomUserManager UserManager { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        Title = L["Forgot Password"];
        UserManager = ScopedServices.GetRequiredService<CustomUserManager>();
        return base.OnInitializedAsync();
    }

    private async Task ResetPassword()
    {
        _sending = true;
        var response = await Sender.Send(new ResetPasswordCommand(_emailAddress));
        if (response.Succeeded)
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add(string.Format(L["The email has been sent, please check the email:{0}."], _emailAddress), Severity.Success, config =>
            {
                config.ShowCloseIcon = false;
                config.HideTransitionDuration = 5000;
            });
            Logger.LogInformation("Password reset token sent to {0}.", _emailAddress);
            NavigationManager.NavigateTo("/pages/authentication/mailsentconfirm");
        }
        else
        {
            Snackbar.Add(response.ErrorMessage, Severity.Error);
        }

        _sending = false;
    }

   

}