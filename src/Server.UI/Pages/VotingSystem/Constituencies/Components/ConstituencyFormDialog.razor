@namespace CleanArchitecture.Blazor.Server.UI.Pages.VotingSystem.Constituencies.Components
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Commands.AddEdit


@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<ConstituenciesPage> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.State)]" @bind-Value="model.State" For="@(() => model.State)" Required="false" RequiredError="@L["state name is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Description)]" Lines="3" For="@(() => model.Description)" @bind-Value="model.Description"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.MpNameExisting)]" @bind-Value="model.MpNameExisting" For="@(() => model.MpNameExisting)" Required="false" RequiredError="@L["existing mp name is required!"]"></MudTextField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.ExistingMpParty)]" @bind-Value="model.ExistingMpParty" For="@(() => model.ExistingMpParty)" Min="0" Required="false" RequiredError="@L["read count is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.ExistingMpTerms)]" @bind-Value="model.ExistingMpTerms" For="@(() => model.ExistingMpTerms)" Min="0" Required="false" RequiredError="@L["write count is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.OtherPastMps)]" @bind-Value="model.OtherPastMps" For="@(() => model.OtherPastMps)" Required="false" RequiredError="@L["alternate mp names is required!"]"></MudTextField>
                </MudItem> 


            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditConstituencyCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditConstituencyCommand model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditConstituencyCommand() { };
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}