@namespace CleanArchitecture.Blazor.Server.UI.Pages.VotingSystem.Votes.Components
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Votes.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<VotesPage> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                @*       <MudItem xs="12" md="6">
                <MudTextField Label="@L[model.GetMemberDescription(x=>x.UserId)]" @bind-Value="model.UserId" For="@(() => model.UserId)" Required="false" RequiredError="@L["user id is required!"]"></MudTextField>
                </MudItem>  *@

                @*<MudItem xs="12" md="6">
                <MudNumericField Label="@L[model.GetMemberDescription(x=>x.ConstituencyName)]" @bind-Value="model.ConstituencyId" For="@(() => model.ConstituencyId)" Min="0" Required="false" RequiredError="@L["constituency id is required!"]"></MudNumericField>
                display name of selected constituency,also allow to edit
                </MudItem>*@
                <MudItem xs="12" md="6">
                    <MudInputLabel> @L["Current MP/Party/Times"]: @model.MpNameExisting / @model.ExistingMpTerms </MudInputLabel>
                </MudItem>
                <MudItem xs="12" md="6">
                    @*  <MudTextField Label="@L[model.GetMemberDescription(x=>x.OpenIssues)]" @bind-Value="model.OpenIssues" For="@(() => model.OpenIssues)" Min="0" Required="false" RequiredError="@L["constituency id delta is required!"]"></MudTextField> *@
                    <MudInputLabel>@L[model.GetMemberDescription(x => x.WishToReElectMp)]</MudInputLabel>
                    <MudRadioGroup T="bool?" Label="@L[model.GetMemberDescription(x=>x.WishToReElectMp)]" @bind-SelectedOption="model.WishToReElectMp">
                        <MudRadio T="bool?" Option="@true" Color="Color.Success">Yes</MudRadio>
                        <MudRadio T="bool?" Option="@false" Color="Color.Error">No</MudRadio>
                        <MudRadio T="bool?" Option="@null">Not Sure</MudRadio>
                    </MudRadioGroup>
                </MudItem>

                @foreach (var kpiRatingComment in model.KPIRatingComments)
                    {
                          
                        @* <MudTextField Label="KPI" @bind-Value="kpiRatingComment.KPI_Id" />
                        <MudNumericField Label="Rating" @bind-Value="kpiRatingComment.Rating" />
                        <MudTextField Label="Comment" @bind-Value="kpiRatingComment.Comment" /> *@
                    <MudItem xs="12">
                        <input type="hidden" @bind="kpiRatingComment.KPI_Id" />
                        <MudInputLabel> @kpiRatingComment.KPI_Id </MudInputLabel>
                        
                        <!-- Rating field with radio buttons -->
        <div class="d-flex align-items-center">
            @for (sbyte i = -2; i <= 3; i++) //change this to reference from enums
            {
                <div class="rating-item">
                    <MudRadio T="sbyte?" Label="@i" GroupName="@($"rating-{kpiRatingComment.KPI_Id}")" @bind-Value="kpiRatingComment.Rating"/>
                    @if (kpiRatingComment.Rating == i)
                    {
                        <span class="selected-rating">@i</span>
                    }
                </div>
            }
        </div>

                        <!-- Button to toggle the comment section -->
                      @*   <div class="d-flex align-items-center">
                            <MudButton Color="Color.Primary" Size="Size.Small" @onclick="@(() => kpiRatingComment.IsExpanded = !kpiRatingComment.IsExpanded)">
                                @if (!kpiRatingComment.IsExpanded)
                                    {
                                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" />
                                    }
                                else
                                    {
                                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" />
                                    }
                            </MudButton>
                        </div> *@
                        <!-- Comment field with toggle functionality -->
                        @* <div style="transition: height 0.5s; overflow-y: hidden; height: @(kpiRatingComment.IsExpanded ? "auto" : "0")">
                            <MudTextField Label="Comment" @bind-Value="kpiRatingComment.Comment" Multiline="true" Rows="3" Required="true" Placeholder="Enter your comment" />
                        </div> *@
                       
                    </MudItem>
                    }

                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.OpenIssues)]" @bind-Value="model.OpenIssues" For="@(() => model.OpenIssues)" Min="0" Required="false" RequiredError="@L["constituency id delta is required!"]"></MudTextField>
                </MudItem>
                @* this requires little more space like expandable text area *@

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        @* <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton> *@
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditVoteCommandValidator _modelValidator = new();
    [EditorRequired][Parameter] public AddEditVoteCommand model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    protected override async Task OnInitializedAsync()
        {
        model.KPIRatingComments = KPI.GetAllDefaultAsVoteKPIRatingCommentList();
        }
    async Task Submit()
        {
        try
            {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
                {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                }
            else
                {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
                }
            }
        finally
            {
            _saving = false;
            }
        }
    async Task SaveAndNew()
        {
        try
            {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
                {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditVoteCommand() { };
                }
            else
                {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
                }
            }
        finally
            {
            _savingnew = false;
            }
        }
    void Cancel() => MudDialog.Cancel();
}