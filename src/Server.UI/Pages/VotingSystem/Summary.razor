@namespace CleanArchitecture.Blazor.Server.UI.Pages.VotingSystem
@page "/Summary"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Caching
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.DTOs
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Specifications
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.VotingSystem.Constituencies.Components
@inject IJSRuntime JS
@inject IStringLocalizer<ConstituenciesPage> L
@attribute [Authorize(Policy = Permissions.Constituencies.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             @bind-SelectedItems="_selectedItems"
             @bind-SelectedItem="_currentDto"
             Hover="true" @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="ConstituencyListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1" />

            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ConstantString.Refresh</MudButton>
                        @if (_canCreate)
                            {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       Disabled="@_loading"
                                       OnClick="OnAddMyVote"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       IconColor="Color.Surface">@ConstantString.AddMyVote</MudButton>
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.ContentCopy"
                                       Size="Size.Small"
                                       Disabled="@(_selectedItems.Count!=1)"
                                       OnClick="OnUpdateMyVote"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       IconColor="Color.Surface">@ConstantString.UpdateMyVote</MudButton>
                            }
                        @if (_canDelete)
                            {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!(_selectedItems.Count>0))"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnRemoveMyVote"
                                       IconColor="Color.Surface">@ConstantString.RemoveMyVote</MudButton>
                            }
                        @if (_canExport)
                            {
                            <MudLoadingButton @bind-Loading="_exporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                              Label="@ConstantString.Export"
                                              Disabled="@_loading"
                                              StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                              Size="Size.Small"
                                              Style="margin-right: 4px; margin-bottom:4px"
                                              OnClick="OnExport"
                                              IconColor="Color.Surface">
                                @ConstantString.Export
                            </MudLoadingButton>
                            }

                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        @if (_canCreate)
                            {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       Disabled="@_loading"
                                       OnClick="OnAddMyVote"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       IconColor="Color.Surface">@ConstantString.New</MudButton>
                            }
                        @if (_canDelete)
                            {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!(_selectedItems.Count>0))"
                                       Size="Size.Small"
                                       Style="margin-right: 4px; margin-bottom:4px"
                                       OnClick="OnRemoveMyVote"
                                       IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                            }
                    </MudHidden>
                </div>
                @if (_canSearch)
                    {
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                    }

            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_canEdit || _canDelete)
                    {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_canEdit)
                            {
                            <MudMenuItem OnAction="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                            }
                        @if (_canDelete)
                            {
                            <MudMenuItem OnAction="@(()=>OnRemoveMyVote(context.Item))">@ConstantString.Delete</MudMenuItem>
                            }
                    </MudMenu>
                    }
                else
                    {
                    <MudIconButton Variant="Variant.Filled" DisableElevation="true"
                                   Disabled="true"
                                   Icon="@Icons.Material.Filled.DoNotTouch"
                                   Size="Size.Small"
                                   Color="Color.Surface">
                        @ConstantString.NoAllowed
                    </MudIconButton>
                    }
            </CellTemplate>
        </TemplateColumn>
        @*TODO: Define the fields that should be displayed in data table*@
        <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.Name</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.Description</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.State" Title="@L[_currentDto.GetMemberDescription(x=>x.State)]" />
        <PropertyColumn Property="x => x.MpNameExisting" Title="@L[_currentDto.GetMemberDescription(x=>x.MpNameExisting)]" />
        <PropertyColumn Property="x => x.ExistingMpParty" Title="@L[_currentDto.GetMemberDescription(x=>x.ExistingMpParty)]" />
        <PropertyColumn Property="x => x.ExistingMpTerms" Title="@L[_currentDto.GetMemberDescription(x=>x.ExistingMpTerms)]" />

        <PropertyColumn Property="x => x.OtherPastMps" Title="@L[_currentDto.GetMemberDescription(x=>x.OtherPastMps)]" />
        <PropertyColumn Property="x => x.ReadCount" Title="@L[_currentDto.GetMemberDescription(x=>x.ReadCount)]" />
        <PropertyColumn Property="x => x.VoteCount" Title="@L[_currentDto.GetMemberDescription(x=>x.VoteCount)]" />
        @*     <PropertyColumn Property="x => x.Summary" Title="@L[_currentDto.GetMemberDescription(x=>x.Summary)]" /> *@

    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
    </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ConstituencyDto> _selectedItems = new HashSet<ConstituencyDto>();
    private MudDataGrid<ConstituencyDto> _table = default!;
    private ConstituencyDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [Inject]
    private IMediator Mediator { get; set; } = default!;
    [Inject]
    private IMapper Mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    private ConstituenciesWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
        {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Constituencies.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Constituencies.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Constituencies.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Constituencies.Delete)).Succeeded;

        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Constituencies.Export)).Succeeded;
        }
    private async Task<GridData<ConstituencyDto>> ServerReload(GridState<ConstituencyDto> state)
        {
        try
            {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<ConstituencyDto>() { TotalItems = result.TotalItems, Items = result.Items };
            }
        finally
            {
            _loading = false;
            }

        }
    private async Task OnSearch(string text)
        {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
        }
    private async Task OnChangedListView(ConstituencyListView listview)
        {
        Query.ListView = listview;
        await _table.ReloadServerData();
        }
    private async Task OnRefresh()
        {
        ConstituencyCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
        }

    private async Task OnAddMyVote()
        {
        var command = new AddEditConstituencyCommand();
        var parameters = new DialogParameters<ConstituencyFormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<ConstituencyFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
            {
            await _table.ReloadServerData();
            }
        }
    private async Task OnUpdateMyVote()
        {
        var dto = _selectedItems.First();
        var command = new AddEditConstituencyCommand()
                {
                State = dto.State,
                Name = dto.Name,
                MpNameExisting = dto.MpNameExisting,
                OtherPastMps = dto.OtherPastMps,
                Description = dto.Description,
                ExistingMpParty = dto.ExistingMpParty,
                ExistingMpTerms = dto.ExistingMpTerms,

                };
        var parameters = new DialogParameters<ConstituencyFormDialog>
            {
               { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<ConstituencyFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
            {
            await _table.ReloadServerData();
            _selectedItems = new HashSet<ConstituencyDto>();
            }
        }
    private async Task OnEdit(ConstituencyDto dto)
        {
        var command = Mapper.Map<AddEditConstituencyCommand>(dto);
        var parameters = new DialogParameters<ConstituencyFormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<ConstituencyFormDialog>
        (L["Edit the item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
            {
            await _table.ReloadServerData();
            }
        }

    private async Task OnRemoveMyVote(ConstituencyDto dto)
        {
        var command = new DeleteConstituencyCommand(new int[] { dto.Id });
        var parameters = new DialogParameters<DeleteConfirmation>
           {
             { x=>x.Command,  command },
             { x=>x.ContentText, string.Format(ConstantString.DeleteConfirmation, dto.Id) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
            {
            await _table.ReloadServerData();
            _selectedItems.Remove(dto);
            }
        }

    private async Task OnRemoveMyVote()
        {
        var command = new DeleteConstituencyCommand(_selectedItems.Select(x => x.Id).ToArray());
        var parameters = new DialogParameters<DeleteConfirmation>
            {
                  { x=>x.Command,  command },
                  { x=>x.ContentText, string.Format(ConstantString.DeleteConfirmWithSelected,_selectedItems.Count) }
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
            {
            await _table.ReloadServerData();
            _selectedItems = new();
            }
        }

    private async Task OnExport()
        {
        _exporting = true;
        var request = new ExportConstituenciesQuery()
                {
                Keyword = Query.Keyword,
                CurrentUser = UserProfile,
                ListView = Query.ListView,
                OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
                };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
            {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["Constituencies"]}.xlsx", result.Data, contentType: "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
            }
        else
            {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
            }
        _exporting = false;
        }


}
