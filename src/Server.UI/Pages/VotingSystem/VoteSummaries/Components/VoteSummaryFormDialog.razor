@namespace CleanArchitecture.Blazor.Server.UI.Pages.VotingSystem.VoteSummaries.Components
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.VoteSummaries.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<VoteSummariesPage> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.ConstituencyId)]" @bind-Value="model.ConstituencyId" For="@(() => model.ConstituencyId)" Min="0" Required="false" RequiredError="@L["constituency id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.CommentsCount)]" @bind-Value="model.CommentsCount" For="@(() => model.CommentsCount)" Min="0" Required="false" RequiredError="@L["comments count is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.VotesCount)]" @bind-Value="model.VotesCount" For="@(() => model.VotesCount)" Min="0" Required="false" RequiredError="@L["votes count is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEditVoteSummaryCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditVoteSummaryCommand model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditVoteSummaryCommand() { };
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}