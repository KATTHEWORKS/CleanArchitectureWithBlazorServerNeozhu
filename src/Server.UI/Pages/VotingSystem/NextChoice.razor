@page "/"
@page "/{ConstituencyIdSelected:int?}/{IsToAdd:bool?}"
@* @page "/{ConstituencyIdSelected:int?}/{IsToAdd:bool?}" *@

@using System.Linq
@using System.Threading.Tasks
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.DTOs
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Queries.GetAll
@* @using CleanArchitecture.Blazor.Application.Features.VotingSystem.Constituencies.Queries.Pagination *@
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Votes.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.VotingSystem.Votes.Queries.GetByUserId
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IMediator Mediator
@inject IStringLocalizer<ConstituenciesPage> L
 @inject IMapper Mapper

<PageTitle>@Title</PageTitle>
<MudCard>
    <MudCardContent>
        <MudTextField Label="Search" @bind-Value="searchTerm" Variant="Variant.Filled" Placeholder="" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">Search</MudButton>
    </MudCardContent>
</MudCard>

@if (constituencies != null && constituencies.Any())
    {
    <MudCard>
        <MudCardContent>
            @foreach (var constituency in constituencies)
                {
                <div>
                    <h3>@constituency.Name / @constituency.State</h3>
                    <p>Existing MP: @constituency.MpNameExisting/@constituency.ExistingMpParty/@constituency.ExistingMpTerms</p>
                    @if (MyVote != null && constituency.Id == MyVote.ConstituencyId)
                        {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => OnAddMyVoteToConstituency(constituency)">Update MyVote</MudButton>
                        }
                    else
                        {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => OnAddMyVoteToConstituency(constituency)">Add MyVote</MudButton>
                        }
                    @if (constituency.Summary != null && constituency.Summary.KPIVotes != null)
                        {
                        foreach (var kpi in constituency.Summary.KPIVotes)
                            {
                            <MudInputLabel> @KPI.Get(kpi.KPI).Name- @kpi.AggregateRatingOfKPI - by @kpi.RatingTypeCountsList.Sum(c => c.Count)</MudInputLabel>
                            }
                        }
                    <!-- Add/Edit Vote buttons and other details here -->
                </div>
                }
        </MudCardContent>
    </MudCard>
    }

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter]
    public int ConstituencyIdSelected { get; set; }

    [Parameter]
    public bool? IsToAdd { get; set; }


    @inject NavigationManager Navigation;

    private string Title { get; set; } = "Mp24.in";
    private string searchTerm = "";
    private List<ConstituencyDto> constituencies;//on default load last/recent/top search results
    private List<ConstituencyDto> allConstituencies;
    private GetAllConstituenciesQuery Query { get; set; } = new();
    private VoteDto? MyVote = null;

    private async Task LoadConstituencies()
        {
        //maintain timer here ti improve optimizations or like last updated time

        //Query.Keyword = searchText;
        // Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
        // Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
        // Query.PageNumber = state.Page + 1;
        // Query.PageSize = state.PageSize;
        var result = await Mediator.Send(Query).ConfigureAwait(false);
        allConstituencies = result.ToList();
        }

    protected override async Task OnInitializedAsync()
        {
        await LoadConstituencies();
        if (ConstituencyIdSelected > 0 && string.IsNullOrEmpty(searchTerm))
            {
            constituencies = [allConstituencies.FirstOrDefault(x => x.Id == ConstituencyIdSelected)];
            }

        var state = await AuthState;

        if (state.IsAuthenticated())
            {
            MyVote = await Mediator.Send(new GetByUserIdQuery() { UserId = state.GetUserId() }).ConfigureAwait(true);
            if (IsToAdd == true && constituencies.Count() > 0)
                {
                await OnAddMyVoteToConstituency(constituencies.First());
                //this makes problem of thread and JSDisconnectedException raises,so blocking but logic is right //TODO
                }
            }
        }

    private async Task Search()
        {
        await LoadConstituencies();
        constituencies = allConstituencies.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        if (constituencies == null || constituencies.Count == 0)
            {
            constituencies = allConstituencies.Where(x => x.State.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || (!string.IsNullOrEmpty(x.MpNameExisting) && x.MpNameExisting.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
            }
        }
    private async Task HandleKeyPress(KeyboardEventArgs e)
        {
        if (e.Key == "Enter")
            {
            await Search();
            }
        }

    private async Task OnAddMyVoteToConstituency(ConstituencyDto dto)
        { //this just opens the screen
        var state = await AuthState;
        if (state.IsAuthenticated())
            {
            VoteDto newVote = new VoteDto()
                    {
                    ConstituencyId = dto.Id,
                    ConstituencyName = $"{dto.Name}/{dto.State}",
                    MpNameExisting = $"{dto.MpNameExisting}/{dto.ExistingMpParty}",
                    ExistingMpTerms = dto.ExistingMpTerms
                    //,UserId = state//fetch from logged in account
                    };
            @if (MyVote != null && dto.Id == MyVote.ConstituencyId)
                {
                MyVote.ConstituencyName = $"{dto.Name}/{dto.State}";
                MyVote.MpNameExisting = $"{dto.MpNameExisting}/{dto.ExistingMpParty}";
                MyVote.ExistingMpTerms = dto.ExistingMpTerms;
                newVote = MyVote;
                }
            if (newVote.KPIRatingComments != null && newVote.KPIRatingComments.Count > 0)
                newVote.KPIRatingComments = newVote.KPIRatingComments.Where(x => x.Rating != null).ToList();
            var command = Mapper.Map<AddEditVoteCommand>(newVote);
            var parameters = new DialogParameters<VoteFormDialog>
            {
                { x=>x.model,command },
            };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = DialogService.Show<VoteFormDialog>
            (L[$"Adding My Vote to Constituency: {dto.Name}/{dto.State}"], parameters, options);//updating if exists
            var result1 = await dialog.Result;
            if (!result1.Canceled)
                {
                MyVote = await Mediator.Send(new GetByUserIdQuery() { UserId = state.GetUserId() }).ConfigureAwait(false);
                //reload inputted constituency results
                // await _table.ReloadServerData();
                }
            // Add logic to add vote here
            }
        else
            {
            // Redirect to login page or show login modal
            LoginThenRedirectToAdd(dto);
            }
        }

    private void LoginThenRedirectToAdd(ConstituencyDto dto)
        {
        var returnUrl = Uri.UnescapeDataString(Navigation.Uri).Replace(Navigation.BaseUri, string.Empty);
        //if (string.IsNullOrEmpty(returnUrl))
        returnUrl = $"?returnUrl={dto.Id}/true";
        Navigation.NavigateTo($"{UiConstants.LoginUrl}{returnUrl}", forceLoad: true);
        // else
        //     returnUrl = $"?returnUrl={returnUrl}{ConstituencyId}/true";
        //vote/constid/true => vote/3/true means after login directly addvote
        // if (string.IsNullOrEmpty(userId))
        //     {
        //     // Redirect to the login page & then to this page
        //     Navigation.NavigateTo($"{UiConstants.LoginUrl}{returnUrl}", forceLoad: true);
        //     }
        // else
        //     {
        //     // Redirect to the specified URL after successful login
        //     Navigation.NavigateTo(returnUrl);
        //     }
        }
}
