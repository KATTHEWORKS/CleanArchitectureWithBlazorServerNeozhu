using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using PublicCommon;
using PublicCommon.Common;
using CleanArchitecture.Blazor.Domain.Common.Entities;

namespace MyTown.Domain
    {
    public class CardData : BaseAuditableEntity, IEquatable<CardData>
        {
        [Key]
        public int IdCardData { get; set; }
        //here Id is cardId only ,not autogenerated


        //below are non sensitive informations
        [Display(Name = "Mobile Number")]
        public string? MobileNumber { get; set; }

        [Display(Name = "Email")]
        public string? Email { get; set; }

        [Display(Name = "Google Map Address Link")]
        public string? GoogleMapAddressUrl { get; set; }


        public DateTime? EndDateToShow { get; set; }//after this date content will be removed on screen
        //public byte? PriorityOrder { get; set; }

        //we can make these as like json & store if more links needed
        [Display(Name = "Google Profile Link")]
        public string? GoogleProfileUrl { get; set; }
        [Display(Name = "FaceBook Link")]
        public string? FaceBookUrl { get; set; }

        [Display(Name = "YouTube Link")]
        public string? YouTubeUrl { get; set; }

        [Display(Name = "Instagram Link")]
        public string? InstagramUrl { get; set; }

        [Display(Name = "Twitter Link")]
        public string? TwitterUrl { get; set; }

        [Display(Name = "Other Reference Link")]
        public string? OtherReferenceUrl { get; set; }

        [MaxLength(1000, ErrorMessage = "Description must be less than 1000 characters.")]
        public string? DetailedDescription { get; set; }



        public string? Timings { get; set; }//Had to store & show as Json timings

        [JsonIgnore]
        //[ForeignKey(nameof(IdCard))]
        public Card? DraftCard { get; set; }

        [JsonIgnore]
        ////[ForeignKey(nameof(IdCard))]
        public VerifiedCard? VerifiedCard { get; set; }

        public bool Equals(CardData? otherCardData)//compares including id
            {//usage bool isEqual1 = person1.Equals(person2);
            if (otherCardData == null) return false; // Not the same type

            return Equals(this, otherCardData);
            }
        public static bool Equals(CardData? source, CardData? otherCardData)//compares including id
            {//usage bool isEqual1 = person1.Equals(person2);
            if (source == null && otherCardData == null) return true; // Not the same type
            if (source == null || otherCardData == null) return false;

            return source.IdCardData == otherCardData.IdCardData &&  // Compare properties
            StringExtensions.Equals(source.MobileNumber, otherCardData.MobileNumber) &&
            StringExtensions.Equals(source.Email, otherCardData.Email) &&
            StringExtensions.Equals(source.GoogleMapAddressUrl, otherCardData.GoogleMapAddressUrl) &&
            StringExtensions.Equals(source.GoogleProfileUrl, otherCardData.GoogleProfileUrl) &&
            StringExtensions.Equals(source.FaceBookUrl, otherCardData.FaceBookUrl) &&
            StringExtensions.Equals(source.YouTubeUrl, otherCardData.YouTubeUrl) &&
            StringExtensions.Equals(source.InstagramUrl, otherCardData.InstagramUrl) &&
            StringExtensions.Equals(source.TwitterUrl, otherCardData.TwitterUrl) &&
            StringExtensions.Equals(source.OtherReferenceUrl, otherCardData.OtherReferenceUrl) &&
            StringExtensions.Equals(source.DetailedDescription, otherCardData.DetailedDescription);
            }

        }
    }
